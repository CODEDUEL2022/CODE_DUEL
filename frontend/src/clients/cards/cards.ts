/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * CODE_DUEL API
 * CODE_DUELのAPI仕様書です。
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  Card
} from '../index.schemas'


  
  /**
 * カード一覧を取得する
 * @summary カード一覧を取得する
 */
export const getCards = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Card[]>> => {
    return axios.get(
      `/cards`,options
    );
  }



export const getGetCardsKey = () => [`/cards`] as const;


export type GetCardsQueryResult = NonNullable<Awaited<ReturnType<typeof getCards>>>
export type GetCardsQueryError = AxiosError<unknown>

/**
 * @summary カード一覧を取得する
 */
export const useGetCards = <TError = AxiosError<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCards>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCardsKey() : null);
  const swrFn = () => getCards(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    
    ...swrOptions
  })

  return {
    swrKey,
    ...query
  }
}
/**
 * カードを取得する
 * @summary カードを取得する
 */
export const getCard = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Card>> => {
    return axios.get(
      `/cards/${id}`,options
    );
  }



export const getGetCardKey = (id: number,) => [`/cards/${id}`] as const;


export type GetCardQueryResult = NonNullable<Awaited<ReturnType<typeof getCard>>>
export type GetCardQueryError = AxiosError<unknown>

/**
 * @summary カードを取得する
 */
export const useGetCard = <TError = AxiosError<unknown>>(
  id: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCard>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCardKey(id) : null);
  const swrFn = () => getCard(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    
    ...swrOptions
  })

  return {
    swrKey,
    ...query
  }
}
